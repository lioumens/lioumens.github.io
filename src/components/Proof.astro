---
interface Props {
  title?: string;
  vMargin?: string;
  hMargin?: string;
}
const {title = "proof", vMargin = "2rem", hMargin = "2rem"} = Astro.props

if (title.length > 20) throw new Error("title too long, must be less than 20 characters");
---
<proof-env>
  <div class="m-proof">
    <details class="m-proof--details">
      <summary class="m-proof--summary">
        <span class="m-proof--header">
          <em class="m-proof--title">{ title }</em>
          <div class="m-proof--arrow"></div>
        </span>
      </summary>
      <div class="m-proof--content">
        <div class="m-proof--proof">
          <slot />
        </div>
        <div class="m-proof--qed"></div>
        
      </div>
    </details>
  </div>
</proof-env>

<style lang="scss" define:vars={{ vMargin, hMargin }}>
  .m-proof {
    margin: var(--vMargin) var(--hMargin); // i'm not sure what indents I like. maybe make into a  prop for more control
  }
  .m--proof--details {
    box-sizing: border-box;
    pointer-events: none;
    z-index: -1
  }
  .m-proof--header {
    cursor: pointer;
    position: relative; // destroys hover effect?, because lowers the element in z-index
    border-bottom: 1px solid;
    border-image-slice: 1;
    border-image-source: linear-gradient(to bottom right, var(--nord7), var(--nord9) 100%);
    // border-right: 1px solid; // drawn after opening?
    // firefox issue, adding inline-block gives width to parent
    display: inline-block;
    // padding now showing too much
    // padding-bottom: 3px; // mobile single pixel issue, include bottom border is 4. 
    margin-bottom: 0px;
    box-sizing: border-box;
    // z-index: -1; // hide border behind arrow, but nolonger hovers
    z-index: 2; // bring up

    
    
    &::after {
      box-sizing: inherit;
      content: "";
      width: 100%; // why does this not line up with the parent border? slightly smaller
      height: 0%;
      position: absolute;
      left: 0;
      bottom: 50%;
      border-right: 1px solid;
      border-image-slice: 1;
      border-image-source: linear-gradient(to bottom right, var(--nord7), var(--nord9) 100%);
    }
    
    &.revealY::after {
      box-sizing: inherit;
      -moz-box-sizing:border-box;
      -webkit-box-sizing:border-box;
      content: "";
      width: 100%; // why does this not line up with the parent border? slightly smaller
      height: 50%;
      position: absolute;
      left: 0;
      bottom: 0;
      border-right: 1px solid;
      border-image-slice: 1;
      border-image-source: linear-gradient(to bottom right, var(--nord7), var(--nord9) 100%);
      transition: height .1s ease-out, bottom .1s ease-out;
    }
  }
  // animation was still showing flashes on mouse over
  .m-proof--details:not([open]) .m-proof--header:hover > .m-proof--arrow {
    animation: bounce 1s linear infinite;
  }
  
  @media (prefers-reduced-motion: reduce) {
    // blink arrow instead
    .m-proof--details:not([open]) .m-proof--header:hover > .m-proof--arrow {
      animation: blink 1.5s infinite;
      // transition: opacity 1.5s alternate infinite;
    }
  }
  
  .m-proof--summary {
    /* pointer-events: none; */
    position: relative;
    list-style: none;
    padding: 0;
    margin: 0;
    user-select: none;
    -webkit-user-select: none;
    
    &::-webkit-details-marker {
      display: none;
    }
  }
  .m-proof--title {
    padding-left: 1rem;
    padding-right: 1rem;
    padding-bottom: 4px; // mobile issue
    // oh no, back to 4px becase it wasn't hiding correctly
    box-sizing: border-box;
    position: relative;
    color: var(--nord8);
    
    &::after {
      // I don't remember why I used title instead of header,
      // seems to work out the same though
      box-sizing: inherit;
      content: "";
      border-bottom: 4px solid var(--nord1);
      // border-bottom: 4px solid red;
      position: absolute;
      height: 110%;
      width: 103%;
      right: -2px;
      bottom: -2px;
      // border-right: 2px solid red; // drawn after opening?
      // border-bottom: 2px solid red;
    }
    &.revealX::after {
      box-sizing: inherit;
      content: "";
      position: absolute;
      border-bottom: 4px solid var(--nord1);
      // border-bottom: 4px solid red;
      height: 110%;
      width: 0%;
      left: 0px;
      bottom: -2px;
      z-index: 1;
      transition: width .4s ease-out;
      // border-right: 2px solid red; // drawn after opening?
      // border-bottom: 2px solid red;
    }
  }
  .m-proof--arrow {
    display: inline-block;
    position: absolute;
    // left: 66px;
    // left: 130px;
    right: -4.5px; // manually adjusted to line up w/ border
    top: 9px;
    height: 10px;
    width: 10px;
    border-top: .5rem solid var(--nord8);
    border-bottom: .5rem solid transparent;
    border-left: .3rem solid transparent;
    border-right: .3rem solid transparent;
    opacity: 1;
    /* margin-bottom: -7px; */
    /* margin-left: 7px; */
    transform-origin: center 25%;
    z-index: 2;
    
    &.hidden {
      display: none;
      opacity: 0;
    }
  }
  
  
  .m-proof--content {
    border-bottom: 1px solid;
    // opacity: 0;
    border-left: 1px solid;
    border-image-slice: 1;
    border-image-source: linear-gradient(to bottom right, var(--nord7), var(--nord10) 100%);
    padding-left: 2rem;
    padding-bottom: 1.5rem;
    position: relative; // needed for before pseudo element styling
    padding-top: 4px;
    // perspective-origin: left bottom; // i can't get these to change the effect
    // transform-style: preserve-3d;
    // backface-visibility: visible;
    
    &::before {
      // box-sizing: inherit;
      content: "";
      border-left: 4px solid var(--nord1); // make large to cover pixel weirdness on mobile
      border-bottom: 4px solid var(--nord1);
      // border-left: 2px solid red;
      // border-bottom: 2px solid red;
      position: absolute;
      right: 0px;
      bottom: -2px;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
    &.revealY::before {
      content: "";
      border-left: 4px solid var(--nord1);
      border-bottom: 4px solid var(--nord1);
      // border-left: 2px solid red;
      // border-bottom: 2px solid red;
      position: absolute;
      right: 0px;
      bottom: -2px;
      width: 100%;
      height: 0%;
      z-index: 1;
      // transform: scaleY(0);
      transition: all .5s ease-out;
      // transition: transform 1s ease-in-out;
    }
    &.revealX::before {
      content: "";
      border-left: 4px solid var(--nord1);
      border-bottom: 4px solid var(--nord1);
      // border-left: 2px solid red;
      // border-bottom: 2px solid red;
      position: absolute;
      right:  0px;
      bottom: -2px;
      width: 0%;
      height: 0%;
      z-index: 1;
      // transform: scaleY(0);
      transition: all .5s ease-out;
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .m-proof--content {
      &::before {
        opacity: 1;
        right: 0px;
        bottom: -2px;
      }
      &.revealY::before {
        opacity: 0;
        // transform: scaleY(0);
        height: 100%;
        width: 100%;
        right: 0px;
        // bottom: -2px;
        transition: opacity .4s ease-out; // instead of all (height/width)
        // transition: transform 1s ease-in-out;
      }
      &.revealX::before {
        opacity: 0;
        // transform: scaleY(0);
        width: 100%;
        height: 100%;
        right: 0px;
        // bottom: -2px;
        transition: opacity .4s ease-out; // instead of all (height/width)
      }
    }
    .m-proof--title {
      &::after {
        // I don't remember why I used title instead of header,
        // seems to work out the same though
        opacity: 1;
        height: 110%;
        width: 103%;
        right: -2px;
        bottom: -2px;
        // border-right: 2px solid red; // drawn after opening?
        // border-bottom: 2px solid red;
      }
      &.revealX::after {
        opacity: 0;
        height: 110%;
        width: 103%;
        right: -2px;
        bottom: -2px;
        transition: opacity .4s ease-out;
        // border-right: 2px solid red; // drawn after opening?
        // border-bottom: 2px solid red;
      }
    }
    .m-proof--header {
      &::after {
        opacity: 0;
      }
      
      &.revealY::after {
        opacity: 1;
        transition: opacity .4s ease-out;
      }
    }
  }
  
  
  .m-proof--proof {
    // animated by WAAPI
  }
  .m-proof--qed {
    height: .6rem;
    width: .6rem;
    background: var(--nord10);
    position: absolute;
    bottom: 0%;
    right: 0%;
    transform-origin: center center;
    transform: translate(50%, 50%);
    opacity: 1;
    z-index: 2;
    &.hidden {
      opacity: 0;
    }
  }
  @keyframes bounce {
    0% {
      transform: translateY(0) scale(1, 1);
    }
    
    20% {
      transform: translateY(-4px) scale(1.2, .76);
    }
    50% {
      transform: translateY(0) scale(1, 1);
    }
    80% {
      transform: translateY(3px) scale(.9, 1.1);
    }
    100% {
      transform: translateY(0) scale(1, 1);
    }
  }
  
  @keyframes blink {
    // for reduced motion
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  
</style>

<script>
  class ProofEnv extends HTMLElement {
    constructor() {
      super();
      const proof = this.querySelector('.m-proof--proof');
      const details = this.querySelector('.m-proof--details');
      const summary = this.querySelector('.m-proof--summary');
      const title = this.querySelector('.m-proof--title');
      const header = this.querySelector('.m-proof--header');
      const arrow = this.querySelector('.m-proof--arrow');
      const content = this.querySelector('.m-proof--content');
      const qed = this.querySelector('.m-proof--qed');
      
      // prevent default click behavior on details element
      if (details) {
        details.addEventListener('click', (e) => {
          e.preventDefault();
        })
      }
      let borderAnim1 = 0, borderAnim2 = 0, borderAnim3 = 0;
      let proofAnim = 0;
      let proofReveal: Animation | null = null, arrowMove: Animation | null = null, arrowSpin: Animation | null = null, qedSpin: Animation | null = null;
      header.addEventListener('click', (e) => {
        if (details.hasAttribute("open")) {
          // console.log(proofReveal) // i have no idea why this errors here
          [ proofReveal, arrowMove, arrowSpin, qedSpin].forEach(anim => {
            anim?.cancel();
          })
          
          details.removeAttribute("open"); // if you animate close, you'll need to manage timing of this
          arrow.classList.remove('hidden');
          title.classList.remove('revealX');
          content.classList.remove('revealX');
          content.classList.remove('revealY');
          header.classList.remove('revealY');
          qed.classList.add('hidden');
          [borderAnim1, borderAnim2, borderAnim3].forEach(anim => {
            clearTimeout(anim)
          })
        } else {
          details.setAttribute("open", "");
          
          const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
          
          const proofBox = proof.getBoundingClientRect();
          const contentBox = content.getBoundingClientRect();
          const summaryBox = summary.getBoundingClientRect();
          const arrowBox = arrow.getBoundingClientRect();
          const headerBox = header.getBoundingClientRect();
          const distDownToTop = (contentBox.top - headerBox.top) / 2;
          const distLeftToBorder = headerBox.right - contentBox.left;
          const distDownToBottom = contentBox.bottom - headerBox.bottom;
          
          // reduced reveal
          if (prefersReducedMotion) {
            const animOptions = {
              duration: 400,
              iterations: 1,
              easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
            }
            proofReveal = proof.animate({opacity: [0, 1]}, animOptions)
            // cant get current opacity value
            arrowSpin = arrow.animate({opacity: [.3, 0]}, animOptions)
            arrowSpin.onfinish = () => {
              arrow.classList.add("hidden")
            }
            qedSpin = qed.animate({opacity: [0, 1]}, animOptions)
            qedSpin.onfinish = () => {
              qed.classList.remove("hidden")
            }
            
            content.classList.add('revealY', 'revealX');
            title.classList.add("revealX");
            header.classList.add("revealY");
            
          } else {
            // for some reason the translateZ will prevent overlapping on z-index
            // for the arrow.
            // https://stackoverflow.com/questions/40895387/z-index-not-working-on-safari-fine-on-firefox-and-chrome
            proofReveal = proof.animate([
            {opacity: 0, transform: "translateZ(-20px) translateY(-15px)  rotateX(-90deg)", transformOrigin: "top center", },
            {opacity: 1, transform: "translateZ(0px) translateY(0px) rotateX(0deg)", transformOrigin: "top center", }
            ],{
              duration: 400,
              iterations: 1,
              easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
            })
            arrowMove = arrow.animate([
            { transform: 'rotate(0) ', borderTopColor: "var(--nord8)"},
            { transform: `rotate(0) translateY(${distDownToTop}px)` },
            { transform: `translateY(${distDownToTop}px) rotate(90deg)` }, // rotate first before translate
            { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop}px) rotate(90deg)` },
            { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop}px)`},
            { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop + distDownToBottom}px)`},
            { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop + distDownToBottom}px) rotate(-90deg)`},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(-90deg)`, borderTopColor: "var(--nord10)"},
            ],
            {
              duration: 1500,
              iterations: 1,
              easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)'
            })
            // must be less than 180 deg when composing transforms
            arrowSpin = arrow.animate([
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(-90deg)`,
            opacity: "100%", borderTopColor: "var(--nord10)"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(0deg)`,
            opacity: "90%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(90deg)`,
            opacity: "80%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(180deg)`,
            opacity: "70%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(270deg)`,
            opacity: "50%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(360deg)`,
            opacity: "30%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(450deg)`,
            opacity: "20%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(540deg)`,
            opacity: "10%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(630deg)`,
            opacity: "5%"},
            { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(720deg)`,
            opacity: "0%", borderTopColor: "var(--nord10)"},
            ],{
              duration: 1000,
              iterations: 1,
              delay: 1500,
              easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
            })
            
            arrowSpin.onfinish = () => {
              arrow.classList.add("hidden")
            }
            
            // spin qed
            // issue with safari spinning more than 180deg
            // https://stackoverflow.com/questions/35186768/safari-css-bug-animation-rotation-direction-incorrect
            qedSpin = qed.animate([
            {transform: "translate(50%, 50%) rotate(0)", opacity: 0},
            {transform: "translate(50%, 50%) rotate(90deg)", opacity: 1/7},
            {transform: "translate(50%, 50%) rotate(180deg)", opacity: 2/7},
            {transform: "translate(50%, 50%) rotate(270deg)", opacity: 3/7},
            {transform: "translate(50%, 50%) rotate(360deg)", opacity: 4/7},
            {transform: "translate(50%, 50%) rotate(540deg)", opacity: 5/7},
            {transform: "translate(50%, 50%) rotate(630deg)", opacity: 6/7},
            {transform: "translate(50%, 50%) rotate(720deg)", opacity: 1},
            ], {
              duration: 1000,
              iterations: 1,
              delay: 1500,
              easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
            })
            
            qedSpin.onfinish = () => {
              qed.classList.remove("hidden")
            }
            
            // pseudoelement animation needs class approach, instead of direct animation
            // this needs to match class addition, otherwise interrupts transition
            // proofAnim = setTimeout(() => {
            // proof.classList.remove("notAnijmated")
            // proof.classList.add('revealContent');
            // }, 10) // timeout becuase animate code was using transformed coordinates
            header.classList.add("revealY")
            borderAnim1 = setTimeout(() => {
              title.classList.add('revealX');
            }, 100)
            borderAnim2 = setTimeout(() => {
              content.classList.add('revealY');
            }, 500)
            borderAnim3 = setTimeout(() => {
              content.classList.add('revealX');
            }, 1000);
          }
        }
      })
    }
  }
  customElements.define("proof-env", ProofEnv)
</script>
  
  
  